#Notes

AWSTemplateFormatVersion: '2010-09-09'
Description: VPC with Private and Public Subnets, NAT Gateway, and VPC Flow Logs
 
Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  
  VPCCidrBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  
  UseLustre:
    Type: String
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'
    Description: Do you want to set up FSx for Lustre?

  RetainLustre:
    Type: String
    Default: 'Delete'
    AllowedValues:
      - 'Retain'
      - 'Delete'
    Description: Do you want to retain the Lustre file system if this stack is updated/deleted?

  UseEFS:
    Type: String 
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'
    Description: Do you want to set up EFS?

  RetainEFS:
    Type: String
    Default: 'Delete'
    AllowedValues:
      - 'Retain'
      - 'Delete'
    Description: Do you want to retain the EFS if this stack is updated/deleted?

  UseCampaignStorage:
    Type: String
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'
    Description: Do you want to set up Campaign Storage in S3?

  RetainCampaignStorage:
    Type: String
    Default: 'Delete'
    AllowedValues:
      - 'Retain'
      - 'Delete'
    Description: Do you want to retain the Campaign Storage if this stack is updated/deleted?
  
  UseArchivalStorage:
    Type: String
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'
    Description: Do you want to set up Archival Storage in S3?

  RetainArchivalStorage:
    Type: String
    Default: 'Delete'
    AllowedValues:
      - 'Retain'
      - 'Delete'
    Description: Do you want to retain the Archival Storage if this stack is updated/deleted?

  ### If you'd like to have this stack setup Active Directory for your user directory store, uncomment the sections below
  # ActiveDirectoryDomainName:
  #   Type: String
  #   Default: example.com
  #   Description: Domain name for the Amazon Managed Active Directory

  # ActiveDirectoryAdminUsername:
  #   Type: String
  #   Default: ad_admin
  #   Description: Username for the Amazon Managed Active Directory

  # RetainActiveDirectory:
  #   Type: String
  #   Default: 'Delete'
  #   AllowedValues:
  #     - 'Retain'
  #     - 'Delete'
  #   Description: Do you want to retain the Active Directory setup when this stack is updated/deleted?

  RDSDatabaseName:
    Type: String
    Default: slurmaccounting
    Description: Name of the MySQL database for Slurm accounting

  RDSDatabaseAdminUsername:
    Type: String
    Default: slurmaccounting_admin
    Description: Username for the RDS MySQL database
    
  RetainRDS:
    Type: String
    Default: 'Delete'
    AllowedValues:
      - 'Retain'
      - 'Delete'
    Description: Do you want to retain the slurm accounting database when this stack is updated/deleted?

  SSHKey:
    Type: AWS::EC2::KeyPair::KeyName
    Description: name of the key pair to ssh into the instance
    MinLength: 1
    ConstraintDescription: Cannot be blank
  
  ParallelClusterVersion:
    Type: String
    Default: 3.10.1
    AllowedValues:
      - 3.10.1
      - 3.10.0
      - 3.9.3
      - 3.9.2
      - 3.9.1
      - 3.9.0
      - 3.8.0
      - 3.7.2
      - 3.7.1
      - 3.7.0
      - 3.6.1
      - 3.6.0
    Description: Version of ParallelCluster to install

  AccessZoneAllowableCIDRBlock:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR block that is allowed to access the Access Zone
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

Conditions:
  UseLustreCondition: !Equals [!Ref UseLustre, 'Yes']
  UseEFSCondition: !Equals [!Ref UseEFS, 'Yes']
  UseCampaignStorageCondition: !Equals [!Ref UseCampaignStorage, 'Yes']
  UseArchivalStorageCondition: !Equals [!Ref UseArchivalStorage, 'Yes']

Resources:
  ### Networking ###
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: nist-800-223-VPC

  # Subnets
  ComputeZoneSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 5, 8 ]]
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Compute Zone

  DataStorageZoneSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 5, 8 ]]
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Data Storage Zone

  ManagementZoneSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, 5, 8 ]]
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Management Zone 1

  ManagementZoneSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt VPC.CidrBlock, 5, 8 ]]
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Management Zone 2

  AccessZoneSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [ 4, !Cidr [ !GetAtt VPC.CidrBlock, 5, 8 ]]
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Access Zone

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: nist-800-223-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # NAT Gateway
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref AccessZoneSubnet
      Tags:
        - Key: Name
          Value: nist-800-223-NGW

  # Routing Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: nist-800-223-public-route-table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AccessZoneSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: nist-800-223-private-route-table

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  ComputeZoneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ComputeZoneSubnet
      RouteTableId: !Ref PrivateRouteTable

  DataStorageZoneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DataStorageZoneSubnet
      RouteTableId: !Ref PrivateRouteTable

  ManagmentZone1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ManagementZoneSubnet1
      RouteTableId: !Ref PrivateRouteTable

  ManagmentZone2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ManagementZoneSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # VPC Flow Logs
  VPCFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  VPCFlowLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 90

  VPCFlowLogs:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogsRole.Arn
      LogGroupName: !Ref VPCFlowLogsLogGroup
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL

  ### Login Node ###
  #Role#
  LoginNodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: LoginNodePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource: 
                  - !Sub 'arn:aws:s3:::${CampaignStorageBucket}'
                  - !Sub 'arn:aws:s3:::${CampaignStorageBucket}/*'
              - Effect: Allow
                Action:
                  - 'ssm:DescribeTags'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ec2:CreateTags'
                  - 'ec2:DeleteTags'
                Resource:
                  - arn:aws:ec2:*:*:instance/*
                  - arn:aws:ec2:*:*:volume/*
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                  - 'logs:DescribeLogGroups'
                  - 'logs:CreateLogGroup'
                Resource: '*'

  #Instance Profile
  LoginNodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref LoginNodeRole

  #EC2 Instance
  LoginNode: 
    Type: AWS::EC2::Instance
    Properties: 
      EbsOptimized: true
      Monitoring: true
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      KeyName: !Ref SSHKey
      SecurityGroupIds:
          - !GetAtt AccessZoneSecurityGroup.GroupId
      SubnetId: !Ref AccessZoneSubnet
      Tags:
        - Key: Name
          Value: LoginNode
      IamInstanceProfile: !Ref LoginNodeInstanceProfile

### Storage ###
  # FSx for Lustre
  LustreFileSystem:
    Condition: UseLustreCondition
    Type: AWS::FSx::FileSystem
    DeletionPolicy: !Ref RetainLustre
    UpdateReplacePolicy: !Ref RetainLustre
    Properties:
      FileSystemType: LUSTRE
      StorageCapacity: 1200
      StorageType: SSD
      LustreConfiguration:
        DeploymentType: SCRATCH_1
        ImportedFileChunkSize: 1024
        ImportPath: !Join
          - ''
          - - 's3://'
            - !Ref CampaignStorageBucket
            - '/lustre/import/'
        ExportPath: !Join
          - ''
          - - 's3://'
            - !Ref CampaignStorageBucket
            - '/lustre/export/'
      KmsKeyId: 'aws/fsx'
      SecurityGroupIds:
        - !GetAtt LustreSecurityGroup.GroupId
      SubnetIds:
        - !Ref DataStorageZoneSubnet
      Tags:
        - Key: Name
          Value: nist-800-223-fsx

  # EFS
  EFSFileSystem:
    Condition: UseEFSCondition
    Type: AWS::EFS::FileSystem
    DeletionPolicy: !Ref RetainEFS
    UpdateReplacePolicy: !Ref RetainEFS
    Properties:
      Encrypted: TRUE
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS
        - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      BackupPolicy:
        Status: ENABLED
  
  EFSMountTarget:
    Type: AWS::EFS::MountTarget
    DeletionPolicy: !Ref RetainEFS
    UpdateReplacePolicy: !Ref RetainEFS
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref DataStorageZoneSubnet
      SecurityGroups:
      - !Ref EFSSecurityGroup

  # Campaign Storage
  CampaignStorageBucket:
    Condition: UseCampaignStorageCondition
    Type: AWS::S3::Bucket
    DeletionPolicy: !Ref RetainCampaignStorage
    UpdateReplacePolicy: !Ref RetainCampaignStorage
    Properties:
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: IntelligentTieringRule
            Status: Enabled
            Transitions:
              - StorageClass: INTELLIGENT_TIERING
                TransitionInDays: 0
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      Tags:
        - Key: Name
          Value: nist-800-223-s3-campaign
  
  # Archival Storage  
  ArchivalStorageBucket:
    Condition: UseArchivalStorageCondition
    Type: AWS::S3::Bucket
    DeletionPolicy: !Ref RetainArchivalStorage
    UpdateReplacePolicy: !Ref RetainArchivalStorage
    Properties:
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: ArchiveRule
            Status: Enabled
            Transitions:
              - StorageClass: Glacier
                TransitionInDays: 0
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      Tags:
        - Key: Name
          Value: nist-800-223-s3-archival

  ### User Directory ###
  # AD Admin Password 
  ### If you'd like to have this stack setup Active Directory for your user directory store, uncomment the sections below
  # ActiveDirectoryAdminPasswordSecret:
  #   Type: 'AWS::SecretsManager::Secret'
  #   DeletionPolicy: !Ref RetainActiveDirectory
  #   UpdateReplacePolicy: !Ref RetainActiveDirectory
  #   Properties:
  #     Description: "Dynamically generated password for AD Admin in Managed Active Directory"
  #     GenerateSecretString:
  #       PasswordLength: 30
  #       ExcludeCharacters: '"@/\'
  #     Tags:
  #       -
  #         Key: environment
  #         Value: !Ref AWS::StackName
  
  # Amazon Managed Active Directory
  # ManagedActiveDirectory:
  #   Type: AWS::DirectoryService::MicrosoftAD
  #   DeletionPolicy: !Ref RetainActiveDirectory
  #   UpdateReplacePolicy: !Ref RetainActiveDirectory
  #   Properties:
  #     Name: !Ref ActiveDirectoryDomainName
  #     Password: !Sub "{{resolve:secretsmanager:${ActiveDirectoryAdminPasswordSecret}:SecretString}}"
  #     VpcSettings:
  #       SubnetIds:
  #         - !Ref ManagementZoneSubnet1
  #         - !Ref ManagementZoneSubnet2
  #       VpcId: !Ref VPC

  ### Slurm Accounting ###
  # RDS Admin Password
  RDSDatabaseAdminPasswordSecret:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: !Ref RetainRDS
    UpdateReplacePolicy: !Ref RetainRDS
    Properties:
      Description: "Dynamically generated password for Slurm Accounting DB in RDS"
      GenerateSecretString:
          PasswordLength: 30
          ExcludeCharacters: '"@/\'
      Tags:
        -
          Key: environment
          Value: !Ref AWS::StackName

  # Create RDS MySQL database for Slurm accounting
  RDSDatabase:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: !Ref RetainRDS
    UpdateReplacePolicy: !Ref RetainRDS
    Properties:
      DBName: !Ref RDSDatabaseName
      Engine: mysql
      MasterUsername: !Ref RDSDatabaseAdminUsername
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${RDSDatabaseAdminPasswordSecret}:SecretString}}"
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBInstanceClass: db.t3.medium
      AllocatedStorage: 20
      AutoMinorVersionUpgrade: true
      VPCSecurityGroups: 
        - !Ref RDSSecurityGroup
      StorageEncrypted: true
      BackupRetentionPeriod: 7
      EnableCloudwatchLogsExports:
        - error
        - general
        - slowquery
      EnableIAMDatabaseAuthentication: true
      Tags:
        -
          Key: environment
          Value: !Ref AWS::StackName

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DeletionPolicy: !Ref RetainRDS
    UpdateReplacePolicy: !Ref RetainRDS
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS database"
      SubnetIds:
        - !Ref ManagementZoneSubnet1
        - !Ref ManagementZoneSubnet2

  ###Security###
  ## Security Groups ##
  # Resource Security Groups #
  LoginNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Login Node
      VpcId: !Ref VPC
  LoginNodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow inbound SSH from apprvoed CIDR to Login Node
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref AccessZoneAllowableCIDRBlock
      GroupId: !GetAtt LoginNodeSecurityGroup.GroupId
  LoginNodeSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow inbound SSH from Managment Zone SG to Login Node
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !GetAtt ManagementZoneSecurityGroup.GroupId
      GroupId: !GetAtt LoginNodeSecurityGroup.GroupId

  HeadNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Head Node
      VpcId: !Ref VPC
  HeadNodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow inbound SSH from Login Node to Head Node
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !GetAtt LoginNodeSecurityGroup.GroupId
      GroupId: !GetAtt HeadNodeSecurityGroup.GroupId
  HeadNodeSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow inbound SSH from Managment Zone SG to Head Node
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !GetAtt ManagementZoneSecurityGroup.GroupId
      GroupId: !GetAtt HeadNodeSecurityGroup.GroupId
  HeadNodeSecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow inbound default slurm ports from Compute Nodes to Head Node
      IpProtocol: tcp
      FromPort: 6817
      ToPort: 6830
      SourceSecurityGroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
      GroupId: !GetAtt HeadNodeSecurityGroup.GroupId

  ComputeNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Compute Node
      VpcId: !Ref VPC
  ComputeNodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow inbound default slurm ports from Head Node to Compute Nodes 
      IpProtocol: tcp
      FromPort: 6817
      ToPort: 6830
      SourceSecurityGroupId: !GetAtt HeadNodeSecurityGroup.GroupId
      GroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
  ComputeNodeSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow inbound SSH from Managment Zone to Compute Nodes for management
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !GetAtt ManagementZoneSecurityGroup.GroupId
      GroupId: !GetAtt ComputeNodeSecurityGroup.GroupId
  
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS database
      VpcId: !Ref VPC
  RDSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow inbound MySQL from Head Node to Slurm Accounting DB
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !GetAtt HeadNodeSecurityGroup.GroupId
      GroupId: !GetAtt RDSSecurityGroup.GroupId

  LustreSecurityGroup:
    Condition: UseLustreCondition  
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for FSx for Lustre
      VpcId: !Ref VPC
  LustreSecurityGroupIngress:
    Condition: UseLustreCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 988
      ToPort: 988
      SourceSecurityGroupId: !GetAtt LustreSecurityGroup.GroupId
      GroupId: !GetAtt LustreSecurityGroup.GroupId
  LustreSecurityGroupIngress1:
    Condition: UseLustreCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 1018
      ToPort: 1023
      SourceSecurityGroupId: !GetAtt LustreSecurityGroup.GroupId
      GroupId: !GetAtt LustreSecurityGroup.GroupId
  LustreSecurityGroupIngress2:
    Condition: UseLustreCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 988
      ToPort: 988
      SourceSecurityGroupId: !GetAtt ManagementZoneSecurityGroup.GroupId
      GroupId: !GetAtt LustreSecurityGroup.GroupId
  LustreSecurityGroupIngress3:
    Condition: UseLustreCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 1018
      ToPort: 1023
      SourceSecurityGroupId: !GetAtt ManagementZoneSecurityGroup.GroupId
      GroupId: !GetAtt LustreSecurityGroup.GroupId
  LustreSecurityGroupIngress4:
    Condition: UseLustreCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 988
      ToPort: 988
      SourceSecurityGroupId: !GetAtt ComputeZoneSubnetSecurityGroup.GroupId
      GroupId: !GetAtt LustreSecurityGroup.GroupId
  LustreSecurityGroupIngress5:
    Condition: UseLustreCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 1018
      ToPort: 1023
      SourceSecurityGroupId: !GetAtt ComputeZoneSubnetSecurityGroup.GroupId
      GroupId: !GetAtt LustreSecurityGroup.GroupId
  LustreSecurityGroupIngress6:
    Condition: UseLustreCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 988
      ToPort: 988
      SourceSecurityGroupId: !GetAtt DataStorageZoneSubnetSecurityGroup.GroupId
      GroupId: !GetAtt LustreSecurityGroup.GroupId
  LustreSecurityGroupIngress7:
    Condition: UseLustreCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 1018
      ToPort: 1023
      SourceSecurityGroupId: !GetAtt DataStorageZoneSubnetSecurityGroup.GroupId
      GroupId: !GetAtt LustreSecurityGroup.GroupId

  EFSSecurityGroup:
    Condition: UseEFSCondition
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EFS
      VpcId: !Ref VPC
  EFSSecurityGroupIngress:
    Condition: UseEFSCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !GetAtt EFSSecurityGroup.GroupId
      GroupId: !GetAtt EFSSecurityGroup.GroupId
  EFSSecurityGroupIngress1:
    Condition: UseEFSCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !GetAtt ManagementZoneSecurityGroup.GroupId
      GroupId: !GetAtt EFSSecurityGroup.GroupId
  EFSSecurityGroupIngress2:
    Condition: UseEFSCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !GetAtt ComputeZoneSubnetSecurityGroup.GroupId
      GroupId: !GetAtt EFSSecurityGroup.GroupId
  EFSSecurityGroupIngress3:
    Condition: UseEFSCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !GetAtt DataStorageZoneSubnetSecurityGroup.GroupId
      GroupId: !GetAtt EFSSecurityGroup.GroupId

  # Subnet Security Groups #
  AccessZoneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Default security group for access zone
      VpcId: !Ref VPC
  AccessZoneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow all ports between resources with the default access zone security group
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt AccessZoneSecurityGroup.GroupId
      GroupId: !GetAtt AccessZoneSecurityGroup.GroupId
 
  ManagementZoneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Default security group for management zone
      VpcId: !Ref VPC
  ManagementZoneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow all ports between resources with the default management zone security group
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt ManagementZoneSecurityGroup.GroupId
      GroupId: !GetAtt ManagementZoneSecurityGroup.GroupId

  ComputeZoneSubnetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Default security group for Compute zone subnet
      VpcId: !Ref VPC
  ComputeZoneSubnetSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow all ports between resources with the default Compute zone subnet security group
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt ComputeZoneSubnetSecurityGroup.GroupId
      GroupId: !GetAtt ComputeZoneSubnetSecurityGroup.GroupId
  
  DataStorageZoneSubnetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Default security group for data storage zone subnet
      VpcId: !Ref VPC
  DataStorageZoneSubnetSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow all ports between resources with the default data storage zone subnet security group
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt DataStorageZoneSubnetSecurityGroup.GroupId
      GroupId: !GetAtt DataStorageZoneSubnetSecurityGroup.GroupId
  
Outputs:
  VPCId:
    Description: The ID of the VPC
    Value: !Ref VPC
    Export:
      Name: vpc-id

  ComputeZoneSubnetId:
    Description: The ID of the Compute Zone Subnet
    Value: !Ref ComputeZoneSubnet
    Export:
      Name: compute-zone-subnet-id

  DataStorageZoneSubnetId:
    Description: The ID of the Data Storage Zone Subnet
    Value: !Ref DataStorageZoneSubnet
    Export:
      Name: data-storage-zone-subnet-id

  ManagementZoneSubnet1Id:
    Description: The ID of the Management Zone 2 Subnet
    Value: !Ref ManagementZoneSubnet1
    Export:
      Name: management-zone-1-subnet-id

  ManagementZoneSubnet2Id:
    Description: The ID of the Management Zone 2 Subnet
    Value: !Ref ManagementZoneSubnet2
    Export:
      Name: management-zone-2-subnet-id

  AccessZoneSubnetId:
    Description: The ID of the Access Zone Subnet
    Value: !Ref AccessZoneSubnet
    Export:
      Name: access-zone-subnet-id

  VPCFlowLogsLogGroupName:
    Description: The name of the VPC Flow Logs Log Group
    Value: !Ref VPCFlowLogsLogGroup
    Export:
      Name: vpc-flow-logs-log-group-name

  FSxForLustreFileSystem:
    Condition: UseLustreCondition
    Description: FSx for Lustre File System
    Value: !Ref LustreFileSystem
    Export:
      Name: FSxForLustreFileSystem

  EFSFileSystem:
    Condition: UseEFSCondition
    Description: Elastic File System (EFS)
    Value: !Ref EFSFileSystem
    Export:
      Name: EFSFileSystem

  CampaignStorageBucket:
    Condition: UseCampaignStorageCondition
    Description: Campaign Storage S3 Bucket
    Value: !Ref CampaignStorageBucket
    Export:
      Name: CampaignStorageBucket

  ArchivalStorageBucket:
    Condition: UseArchivalStorageCondition
    Description: Archival Storage S3 Bucket
    Value: !Ref ArchivalStorageBucket
    Export:
      Name: ArchivalStorageBucket

  # ActiveDirectoryID:
  #   Description: ID of the Amazon Managed Active Directory
  #   Value: !Ref ManagedActiveDirectory

  RDSURI:
    Description: Endpoint of the RDS MySQL database
    Value: !GetAtt RDSDatabase.Endpoint.Address
    Export:
      Name: rds-uri

  RDSDatabaseAdminUsername:
    Description: Admin username for the RDS MySQL database
    Value: !Ref RDSDatabaseAdminUsername
    Export:
      Name: rds-admin-username

  RDSDatabaseAdminPasswordSecret:
    Description: Password secret for the RDS MySQL database
    Value: !Ref RDSDatabaseAdminPasswordSecret
    Export:
      Name: rds-admin-password-secret-arn

  RDSDatabaseName:
    Description: Name of the RDS MySQL database
    Value: !Ref RDSDatabaseName
    Export:
      Name: rds-db-name

  ManagementZoneSecurityGroup:
    Description: ID of the Management Zone Security Group
    Value: !GetAtt ManagementZoneSecurityGroup.GroupId
    Export:
      Name: management-zone-security-group-id

  ComputeZoneSecurityGroup:
    Description: ID of the Compute Zone Security Group
    Value: !GetAtt ComputeZoneSubnetSecurityGroup.GroupId
    Export:
      Name: compute-zone-security-group-id

  DataStorageZoneSecurityGroup:
    Description: ID of the Data Storage Zone Security Group
    Value: !GetAtt DataStorageZoneSubnetSecurityGroup.GroupId
    Export:
      Name: data-storage-zone-security-group-id

  AccessZoneSecurityGroup:
    Description: ID of the Access Zone Security Group
    Value: !GetAtt AccessZoneSecurityGroup.GroupId
    Export:
      Name: access-zone-security-group-id

  SSHKeyName:
    Description: Name of the SSH key for the batch compute environment instances
    Value: !Ref SSHKey
    Export:
      Name: ssh-key-name

  CFNStackName:
    Description: Name of the parent CloudFormation stack
    Value: !Ref AWS::StackName
    Export:
      Name: cfn-stack-name

  ParallelClusterVersion:
    Description: Version of the ParallelCluster
    Value: !Ref ParallelClusterVersion
    Export:
      Name: pcluster-version