AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::LanguageExtensions'
Description: VPC with Private and Public Subnets, NAT Gateway, and VPC Flow Logs

Parameters:
  NISTNetworkStackName:
    Type: String
    Description: Name of the NIST Networking Stack.
    Default: "nist-network"

  StorageSubnetIDs:
    Type: CommaDelimitedList
    Description: Find the Storage Subnet IDs export from your NIST Networking Stack (comma-separated list)
    AllowedPattern: ^(?!\s*$).+
    ConstraintDescription: Must provide at least one value (comma-separated list)

  UseFSxL:
    Type: String
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'
    Description: Do you want to set up FSx for Lustre (FSxL)?

  RetainFSxL:
    Type: String
    Default: 'Delete'
    AllowedValues:
      - 'Retain'
      - 'Delete'
    Description: Do you want to retain the FSx for Lustre (FSxL) file system if this stack is updated/deleted?

  UseEFS:
    Type: String 
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'
    Description: Do you want to set up EFS?

  RetainEFS:
    Type: String
    Default: 'Delete'
    AllowedValues:
      - 'Retain'
      - 'Delete'
    Description: Do you want to retain the EFS if this stack is updated/deleted?

  UseCampaignStorage:
    Type: String
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'
    Description: Do you want to set up Campaign Storage in S3?

  RetainCampaignStorage:
    Type: String
    Default: 'Delete'
    AllowedValues:
      - 'Retain'
      - 'Delete'
    Description: Do you want to retain the Campaign Storage if this stack is updated/deleted?
  
  UseArchivalStorage:
    Type: String
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'
    Description: Do you want to set up Archival Storage in S3?

  RetainArchivalStorage:
    Type: String
    Default: 'Delete'
    AllowedValues:
      - 'Retain'
      - 'Delete'
    Description: Do you want to retain the Archival Storage if this stack is updated/deleted?

Conditions:
  UseFSxLCondition: !Equals [!Ref UseFSxL, 'Yes']
  UseEFSCondition: !Equals [!Ref UseEFS, 'Yes']
  UseCampaignStorageCondition: !Equals [!Ref UseCampaignStorage, 'Yes']
  UseArchivalStorageCondition: !Equals [!Ref UseArchivalStorage, 'Yes']

Resources:
  
  ## Security Groups ##
  FSxLSecurityGroup:
    Condition: UseFSxLCondition  
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for FSx for Lustre (FSxL)
      VpcId:  
        Fn::ImportValue: !Sub '${NISTNetworkStackName}-VPC'

  EFSSecurityGroup:
    Condition: UseEFSCondition
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EFS
      VpcId:  
        Fn::ImportValue: !Sub '${NISTNetworkStackName}-VPC'

  ## Security Group Ingress Rules ##
  FSxLSecurityGroupIngress:
    Condition: UseFSxLCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 988
      ToPort: 988
      SourceSecurityGroupId: !GetAtt FSxLSecurityGroup.GroupId
      GroupId: !GetAtt FSxLSecurityGroup.GroupId
  
  FSxLSecurityGroupIngress1:
    Condition: UseFSxLCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 1018
      ToPort: 1023
      SourceSecurityGroupId: !GetAtt FSxLSecurityGroup.GroupId
      GroupId: !GetAtt FSxLSecurityGroup.GroupId
  
  FSxLSecurityGroupIngress2:
    Condition: UseFSxLCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 988
      ToPort: 988
      SourceSecurityGroupId: 
        Fn::ImportValue: !Sub '${NISTNetworkStackName}-ManagementZoneSecurityGroupID'
      GroupId: !GetAtt FSxLSecurityGroup.GroupId
  
  FSxLSecurityGroupIngress3:
    Condition: UseFSxLCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 1018
      ToPort: 1023
      SourceSecurityGroupId: 
        Fn::ImportValue: !Sub '${NISTNetworkStackName}-ManagementZoneSecurityGroupID'
      GroupId: !GetAtt FSxLSecurityGroup.GroupId
  
  FSxLSecurityGroupIngress4:
    Condition: UseFSxLCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 988
      ToPort: 988
      SourceSecurityGroupId: 
        Fn::ImportValue: !Sub '${NISTNetworkStackName}-ComputeZoneSecurityGroupID'
      GroupId: !GetAtt FSxLSecurityGroup.GroupId
  
  FSxLSecurityGroupIngress5:
    Condition: UseFSxLCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 1018
      ToPort: 1023
      SourceSecurityGroupId: 
        Fn::ImportValue: !Sub '${NISTNetworkStackName}-ComputeZoneSecurityGroupID'
      GroupId: !GetAtt FSxLSecurityGroup.GroupId
  
  FSxLSecurityGroupIngress6:
    Condition: UseFSxLCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 988
      ToPort: 988
      SourceSecurityGroupId: 
        Fn::ImportValue: !Sub '${NISTNetworkStackName}-StorageZoneSecurityGroupID'
      GroupId: !GetAtt FSxLSecurityGroup.GroupId
  
  FSxLSecurityGroupIngress7:
    Condition: UseFSxLCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 1018
      ToPort: 1023
      SourceSecurityGroupId: 
        Fn::ImportValue: !Sub '${NISTNetworkStackName}-StorageZoneSecurityGroupID'
      GroupId: !GetAtt FSxLSecurityGroup.GroupId


  EFSSecurityGroupIngress:
    Condition: UseEFSCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !GetAtt EFSSecurityGroup.GroupId
      GroupId: !GetAtt EFSSecurityGroup.GroupId
  
  EFSSecurityGroupIngress1:
    Condition: UseEFSCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: 
        Fn::ImportValue: !Sub '${NISTNetworkStackName}-ManagementZoneSecurityGroupID'
      GroupId: !GetAtt EFSSecurityGroup.GroupId
  
  EFSSecurityGroupIngress2:
    Condition: UseEFSCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: 
        Fn::ImportValue: !Sub '${NISTNetworkStackName}-ComputeZoneSecurityGroupID'
      GroupId: !GetAtt EFSSecurityGroup.GroupId
  
  EFSSecurityGroupIngress3:
    Condition: UseEFSCondition
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: 
        Fn::ImportValue: !Sub '${NISTNetworkStackName}-StorageZoneSecurityGroupID'
      GroupId: !GetAtt EFSSecurityGroup.GroupId

  ### Storage Resources ###
  # Campaign Storage
  CampaignStorageBucket:
    Condition: UseCampaignStorageCondition
    Type: AWS::S3::Bucket
    DeletionPolicy: !Ref RetainCampaignStorage
    UpdateReplacePolicy: !Ref RetainCampaignStorage
    Properties:
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: IntelligentTieringRule
            Status: Enabled
            Transitions:
              - StorageClass: INTELLIGENT_TIERING
                TransitionInDays: 0
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      Tags:
        - Key: environment
          Value: !Sub ${AWS::StackName}
  
  # Archival Storage  
  ArchivalStorageBucket:
    Condition: UseArchivalStorageCondition
    Type: AWS::S3::Bucket
    DeletionPolicy: !Ref RetainArchivalStorage
    UpdateReplacePolicy: !Ref RetainArchivalStorage
    Properties:
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: ArchiveRule
            Status: Enabled
            Transitions:
              - StorageClass: Glacier
                TransitionInDays: 0
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      Tags:
        - Key: environment
          Value: !Sub ${AWS::StackName}
          
  # FSx for Lustre
  FSxLFileSystem:
    Condition: UseFSxLCondition
    Type: AWS::FSx::FileSystem
    DeletionPolicy: !Ref RetainFSxL
    UpdateReplacePolicy: !Ref RetainFSxL
    Properties:
      FileSystemType: LUSTRE
      StorageCapacity: 1200
      StorageType: SSD
      LustreConfiguration:
        DeploymentType: SCRATCH_1
        ImportedFileChunkSize: 1024
        ImportPath: !Join
          - ''
          - - 's3://'
            - !Ref CampaignStorageBucket
            - '/lustre/import/'
        ExportPath: !Join
          - ''
          - - 's3://'
            - !Ref CampaignStorageBucket
            - '/lustre/export/'
      KmsKeyId: 'aws/fsx'
      SecurityGroupIds:
        - !Ref FSxLSecurityGroup
        - Fn::ImportValue: !Sub '${NISTNetworkStackName}-StorageZoneSecurityGroupID'
      SubnetIds:
        - Fn::ImportValue: !Sub '${NISTNetworkStackName}-StorageZoneSubnet'
      Tags:
        - Key: environment
          Value: !Sub ${AWS::StackName}

  # EFS
  EFSFileSystem:
    Condition: UseEFSCondition
    Type: AWS::EFS::FileSystem
    DeletionPolicy: !Ref RetainEFS
    UpdateReplacePolicy: !Ref RetainEFS
    Properties:
      Encrypted: TRUE
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS
        - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      BackupPolicy:
        Status: ENABLED
  
  Fn::ForEach::EFSMountTargets:
    - StorageSubnetID
    - !Ref StorageSubnetIDs
    - EFSMountTarget&{StorageSubnetID}:
        Type: AWS::EFS::MountTarget
        DeletionPolicy: !Ref RetainEFS
        UpdateReplacePolicy: !Ref RetainEFS
        Properties:
          FileSystemId: !Ref EFSFileSystem
          SubnetId: !Ref StorageSubnetID
          SecurityGroups:
          - !Ref EFSSecurityGroup
          - Fn::ImportValue: !Sub '${NISTNetworkStackName}-StorageZoneSecurityGroupID'

Outputs:
  CampaignStorageBucketName:
    Condition: UseCampaignStorageCondition
    Description: Campaign Storage Bucket Name
    Value: !Ref CampaignStorageBucket
    Export:
      Name: !Sub '${AWS::StackName}-CampaignStorageBucket'

  ArchivalStorageBucketName:
    Condition: UseArchivalStorageCondition
    Description: Archival Storage Bucket Name
    Value: !Ref ArchivalStorageBucket
    Export:
      Name: !Sub '${AWS::StackName}-ArchivalStorageBucket'

  FSxLFileSystemID:
    Condition: UseFSxLCondition
    Description: FSx for Lustre (FSxL) File System ID
    Value: !Ref FSxLFileSystem
    Export:
      Name: !Sub '${AWS::StackName}-FSx-ID'

  EFSFileSystemID:
    Condition: UseEFSCondition
    Description: EFS File System ID
    Value: !Ref EFSFileSystem
    Export:
      Name: !Sub '${AWS::StackName}-EFS-ID'
  
  FSxLSecurityGroupID:
    Condition: UseFSxLCondition
    Description: FSx for Lustre (FSxL) Security Group ID
    Value: !GetAtt FSxLSecurityGroup.GroupId
    Export:
      Name: !Sub '${AWS::StackName}-FSxLSecurityGroupID'

  EFSSecurityGroupID:
    Condition: UseEFSCondition
    Description: EFS Security Group ID
    Value: !GetAtt EFSSecurityGroup.GroupId
    Export:
      Name: !Sub '${AWS::StackName}-EFSSecurityGroupID'