AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys Amazon RDS MySQL database for Slurm accounting and user management following NIST SP 800-223 security controls. Creates database instance in Management zone with encrypted storage and automated backups. Establishes necessary security groups, parameter groups, and credentials management through AWS Secrets Manager. Exports database endpoint, credentials, and access policies for use by ParallelCluster head node configuration.

Parameters:
  NISTNetworkStackName:
    Type: String
    Description: Name of the NIST Networking Stack. (You can find this value in the left hand menu by right-clicking Stacks and opening in a new tab.)
    Default: ""

  NISTSecurityStackName:
    Type: String
    Description: Name of the NIST Networking Stack. (You can find this value in the left hand menu by right-clicking Stacks and opening in a new tab.)
    Default: ""

  RDSDatabaseName:
      Type: String
      Default: slurmaccounting
      Description: Name of the MySQL database for Slurm accounting

  RDSDatabaseAdminUsername:
    Type: String
    Default: slurmaccounting_admin
    Description: Username for the RDS MySQL database
    
  RetainRDS:
    Type: String
    Default: 'Delete'
    AllowedValues:
      - 'Retain'
      - 'Delete'
    Description: Do you want to retain the slurm accounting database when this stack is updated/deleted?

Resources:
  ### Security Groups ###
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS database
      VpcId:  
        Fn::ImportValue: !Sub '${NISTNetworkStackName}-VPC'
  RDSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow inbound MySQL from Head Node to Slurm Accounting DB
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: 
        Fn::ImportValue: !Sub '${NISTSecurityStackName}-HeadNodeSecurityGroupID'
      GroupId: !GetAtt RDSSecurityGroup.GroupId
  RDSSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow inbound MySQL from Management Zone to Slurm Accounting DB
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId:
        Fn::ImportValue: !Sub '${NISTNetworkStackName}-ManagementZoneSecurityGroupID'
      GroupId: !GetAtt RDSSecurityGroup.GroupId

  ### Slurm Accounting RDS DB###
  # RDS Admin Password
  RDSDatabaseAdminSecret:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: !Ref RetainRDS
    UpdateReplacePolicy: !Ref RetainRDS
    Properties:
      Description: "Dynamically generated password for Slurm Accounting DB in RDS"
      GenerateSecretString:
          PasswordLength: 30
          ExcludeCharacters: '"@/\'
      Tags:
        - Key: environment
          Value: !Sub ${AWS::StackName}

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DeletionPolicy: !Ref RetainRDS
    UpdateReplacePolicy: !Ref RetainRDS
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS database"
      SubnetIds:
        Fn::Split:
          - ','
          - Fn::ImportValue: !Sub '${NISTNetworkStackName}-ManagementZoneSubnets'

  # RDS MySQL database for Slurm accounting
  RDSDatabase:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: !Ref RetainRDS
    UpdateReplacePolicy: !Ref RetainRDS
    Properties:
      DBName: !Ref RDSDatabaseName
      Engine: mysql
      MasterUsername: !Ref RDSDatabaseAdminUsername
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${RDSDatabaseAdminSecret}:SecretString}}"
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBInstanceClass: db.t3.medium
      AllocatedStorage: 20
      AutoMinorVersionUpgrade: true
      VPCSecurityGroups: 
        - !Ref RDSSecurityGroup
      StorageEncrypted: true
      BackupRetentionPeriod: 7
      EnableCloudwatchLogsExports:
        - error
        - general
        - slowquery
      EnableIAMDatabaseAuthentication: true
      Tags:
        - Key: environment
          Value: !Sub ${AWS::StackName}
  
  #Policy to allow access to the RDS Database Admin Password Secret
  RDSDBSecretPolicy:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: !Ref RetainRDS
    UpdateReplacePolicy: !Ref RetainRDS
    Properties:
      Description: "Policy to allow access to the RDS Admin Secret"
      Path: "/parallelcluster/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "secretsmanager:GetSecretValue"
            Resource: !Ref RDSDatabaseAdminSecret 

Outputs:
  RDSURI:
    Description: Endpoint of the RDS MySQL database
    Value: !Join
      - ":"
      - - !GetAtt RDSDatabase.Endpoint.Address
        - '3306'
    Export:
      Name: !Sub '${AWS::StackName}-RDS-URI'

  RDSDatabaseAdminUsername:
    Description: Admin username for the RDS MySQL database
    Value: !Ref RDSDatabaseAdminUsername
    Export:
      Name: !Sub '${AWS::StackName}-RDS-Admin-Username'

  RDSDatabaseAdminSecret:
    Description: Password secret for the RDS MySQL database
    Value: !Ref RDSDatabaseAdminSecret
    Export:
      Name: !Sub '${AWS::StackName}-RDS-Admin-Secret-ARN'

  RDSDatabaseName:
    Description: Name of the RDS MySQL database
    Value: !Ref RDSDatabaseName
    Export:
      Name: !Sub '${AWS::StackName}-RDS-DB-Name'

  RDSDBSecretPolicyARN:
    Description: Policy ARN to allow access to the RDS MySQL database admin secret
    Value: !Ref RDSDBSecretPolicy
    Export:
      Name: !Sub '${AWS::StackName}-RDS-Secret-Policy-ARN'
